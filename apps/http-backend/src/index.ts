import express from "express";
const app = express();
import jwt from "jsonwebtoken";
import { JWT_SECRET } from "@repo/backend-common/config";
import { middleware } from "./middleware";
import { CreateUserSchema, SigninSchema, CreateRoom } from "@repo/common/types";
import { prismaClient } from "@repo/db/clinet";
import cors from "cors";
import { headers } from "next/headers";
import bcrypt from "bcrypt";
import { buildCustomRoute } from "next/dist/server/lib/router-utils/filesystem";

app.use(cors());

app.use(express.json());

app.post("/signup", async (req, res) => {
  const parsedData = CreateUserSchema.safeParse(req.body);
  if (!parsedData.success) {
    console.log(parsedData.error);
    res.json({
      parsedData,
    });
    return;
  }

  const hashed = await bcrypt.hash(parsedData.data?.password, 10);

  try {
    await prismaClient.user.create({
      data: {
        email: parsedData.data?.username,
        password: hashed,
        name: parsedData.data?.name,
      },
    });
    res.json({
      message: "user Signed UP !!  ",
    });
  } catch (e) {}

  res.json({
    message: "problem while Sign UP ! ",
  });
});

app.post("/signin", async (req, res) => {
  //const parsedData = req.body;
  const parsedData = SigninSchema.safeParse(req.body);
  if (!parsedData.success) {
    console.log(parsedData.error);
    res.json({
      parsedData,
    });
    return;
  }
  console.log("passed correctly ");
  console.log(parsedData.data);
  console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>");

  const user = await prismaClient.user.findFirst({
    where: {
      email: parsedData.data.username,
    },
  });
  if (!user) {
    res.status(403).json({
      message: "incorrect credentials ",
    });
    return;
  }

  const passwordmatch = bcrypt.compare(parsedData.data.password, user.password);
  if (!passwordmatch) {
    res.status(403).json({
      message: "password not matched ",
    });
    return;
  }

  const token = jwt.sign(
    {
      userId: user?.id,
    },
    JWT_SECRET
  );

  res.json({
    token: token,
  });
});

//@ts-ignore
app.post("/room", middleware, async (req, res) => {
  console.log("insdie create room ");
  const parsedData = CreateRoom.safeParse(req.body);

  if (!parsedData.success) {
    res.status(400).json({
      parsedData,
    });
    return;
  }
  console.log("hey there ");
  console.log(req.body);

  //@ts-ignore
  const userId = req.userId;
  //@ts-ignore
  console.log(req.userId);
  console.log(userId);
  console.log("hello there ");

  try {
    await prismaClient.room.create({
      data: {
        slug: parsedData.data.name,
        adminId: userId,
      },
    });
    res.status(200).json({
      message: "room EndPoint ",
    });
    return;
  } catch (e) {
    res.status(403).json({
      message: "Error While Creating Room ",
    });
    return;
  }
});

// getting room generated by user

//@ts-ignore
app.get("/getroom", middleware, async (req, res) => {
  console.log("gettting rooms generted by user ");
  //@ts-ignore
  const userId = await req.userId;

  try {
    const rooms = await prismaClient.room.findMany({
      where: {
        adminId: userId,
      },
    });

    res.status(200).json({
      rooms: rooms,
    });
  } catch (e) {
    res.status(403).json({
      message: "there is some error ",
    });
  }
});

/////////////////////////////////

app.get("/room/:slug", async (req, res) => {
  const slug = req.params.slug;
  const room = await prismaClient.room.findFirst({
    where: {
      slug,
    },
  });
  console.log("sending data ");
  console.log(room);

  res.json({
    room,
  });
});

app.get("/chats/:roomId", async (req, res) => {
  try {
    const roomId = Number(req.params.roomId);
    console.log("this is roomd Id ");
    console.log(req.params.roomId);
    if (isNaN(roomId)) {
      res.status(400).json({
        error: "invalid roomId ",
      });
    }
    const messages = await prismaClient.chat.findMany({
      where: {
        roomId: roomId,
      },
      orderBy: {
        id: "desc",
      },
      take: 1000,
    });

    res.json({
      messages,
    });
  } catch (e) {
    console.log(e);
    res.json({
      messages: [],
    });
  }
});

// to get all the rooms created by user

app.listen(3002);
